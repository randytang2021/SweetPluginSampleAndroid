/*
* please do not modify this file!
* It's being applied to 40+ plugins. We will use script to maintain it.
* For change the aar version name, please go to the sweet_plugin_aar_version.properties in the current directory
* */
apply plugin: 'maven-publish'

class Sweetconstant {
    public static final SWEET_MAVEN_CONFIG = "sweet_android_development.properties"
    public static final PLUGIN_VERSION_FILE_NAME = "sweet_plugin_aar_version.properties"
    public static final MAVEN_USERNAME_STR = "maven.username"
    public static final MAVEN_PASSWORD_STR = "maven.password"
    public static final MAVEN_URL_STR = "maven.url"
    public static final PLUGIN_VERSION_KEY_STRING = "version"
    public static final REPO_ALIAS_KEY_STRING = "repo.alias"
}

def VERSION_PROPERTY = getSweetVersionProperties(project.projectDir.getAbsolutePath(), Sweetconstant.PLUGIN_VERSION_FILE_NAME)
def POM_VERSION = getPluginVersion(VERSION_PROPERTY, Sweetconstant.PLUGIN_VERSION_KEY_STRING)

def REPO_ALIAS = getPluginVersion(VERSION_PROPERTY, Sweetconstant.REPO_ALIAS_KEY_STRING)

def REPO_NAME = getRepoName(project, REPO_ALIAS)

def REPO_NAME_BREAK_DOWN = getNameList(REPO_NAME)
def COMPANY_NAME = REPO_NAME_BREAK_DOWN[0]      // company name: sweet
def ANDROID_TYPE = REPO_NAME_BREAK_DOWN[1]      // app or plugin
def POM_ARTIFACT_ID = REPO_NAME_BREAK_DOWN[2]   // project name: wco, hms, event, etc.
def POM_GROUP_ID = "com.${COMPANY_NAME}.${ANDROID_TYPE}"


def SWEET_ANDROID_DEVELOPMENT_PROPERTIES = getSweetAndroidDevelopmentProperties(Sweetconstant.SWEET_MAVEN_CONFIG, "${COMPANY_NAME}", POM_ARTIFACT_ID)
def POM_URL = getPomProperty(SWEET_ANDROID_DEVELOPMENT_PROPERTIES, "${COMPANY_NAME}", "${Sweetconstant.MAVEN_URL_STR}")
def POM_USERNAME = getPomProperty(SWEET_ANDROID_DEVELOPMENT_PROPERTIES, "${COMPANY_NAME}", "${Sweetconstant.MAVEN_USERNAME_STR}")
def POM_PASSWORD = getPomProperty(SWEET_ANDROID_DEVELOPMENT_PROPERTIES, "${COMPANY_NAME}", "${Sweetconstant.MAVEN_PASSWORD_STR}")

project.ext {
    aarVersionName = POM_VERSION
    aarOutputFileName = "${POM_GROUP_ID}.${POM_ARTIFACT_ID}"
}

/*
 *
 * REPO_NAME_BREAK_DOWN = [sweet, plugin, event, android]  <------ SweetPluginEventAndroid
 * https://developer.android.com/studio/build/maven-publish-plugin
 * */
def pomArrVersion = POM_VERSION
def isAndroidLibrary = plugins.hasPlugin('com.android.library')
def isJavaLibrary = plugins.hasPlugin('java')

afterEvaluate {
    if (isAndroidLibrary || isJavaLibrary) {
        publishing {
            publications {
                release(MavenPublication) {
                    if (isAndroidLibrary) {
                        from components.release
                    } else {
                        from components.java
                    }
                    groupId POM_GROUP_ID
                    artifactId POM_ARTIFACT_ID
                    version pomArrVersion
                }
            }
            repositories {
                maven {
                    url POM_URL
                    credentials {
                        username POM_USERNAME
                        password POM_PASSWORD
                    }
                }
            }
        }
    } else {
        println("==> other typle of module, could be android app, do nothing....")
    }
}

tasks.publish.doLast {
    def artifactSuffix
    if (isAndroidLibrary) {
        artifactSuffix = '@aar'
    } else if (isJavaLibrary) {
        artifactSuffix = '@jar'
    } else {
        println "unsupported type, do nothing"
        return
    }
    def artifactInfo = "${POM_GROUP_ID}:${POM_ARTIFACT_ID}:${pomArrVersion}${artifactSuffix}"
    def artifactInfoRegex = "${POM_GROUP_ID}:${POM_ARTIFACT_ID}:.*${artifactSuffix}"
    println "Plugin maven-publish published: ${artifactInfo} successfully"
    new File("${buildDir}", "artifactInfo.txt").text = "${artifactInfo}"
    new File("${buildDir}", "artifactInfoRegex.txt").text = "${artifactInfoRegex}"
    new File("${buildDir}", "maven_publication_file_type.txt").text = "${artifactSuffix}"
}

private static Properties getSweetAndroidDevelopmentProperties(String configFileName, String companyName, String pluginName) {
    Properties properties = new Properties()

    def androidDevelopmentPropertiesCiPath = System.getenv("ANDROID_DEVELOPMENT_PROPERTIES_CI_PATH")

    try {
        def configFileNamePath
        if (null != androidDevelopmentPropertiesCiPath && !androidDevelopmentPropertiesCiPath.isEmpty()) {
            configFileNamePath = androidDevelopmentPropertiesCiPath
        } else {
            println "No CI env: ANDROID_DEVELOPMENT_PROPERTIES_CI_PATH set up, try to use local"
            configFileNamePath = System.properties['user.home']
        }
        println "configFileNamePath ----> ${configFileNamePath}"
        if (configFileNamePath == null) {
            throw new Exception("No sweet_android_development.properties set up!!")
        } else {
            def file = new File("${configFileNamePath}/${configFileName}")
            InputStream inputStream = file.newDataInputStream()
            properties.load(inputStream)
            inputStream.close()
        }
    } catch (Exception exception) {

        println "----------------------------------------------------------------------------------------------------------------------------------------------------------"
        println "----- getSweetAndroidDevelopmentProperties exception ----> ${exception.toString()}"
        if (null != androidDevelopmentPropertiesCiPath && !androidDevelopmentPropertiesCiPath.isEmpty()) {
            println "----- To publish ${companyName} plugin:${pluginName}'s AAR, please make sure the ${Sweetconstant.SWEET_MAVEN_CONFIG} is under your ${androidDevelopmentPropertiesCiPath} directory in CI machine with the correct secret in Github:"
        } else {
            println "----- To publish ${companyName} plugin:${pluginName}'s AAR, please config ${Sweetconstant.SWEET_MAVEN_CONFIG} under your ${System.properties['user.home']} directory:"
        }
        println "----- ${companyName}.${Sweetconstant.MAVEN_USERNAME_STR}=xxxx"
        println "----- ${companyName}.${Sweetconstant.MAVEN_PASSWORD_STR}=xxxx"
        println "----- ${companyName}.${Sweetconstant.MAVEN_URL_STR}=www.xxxxxx"
        println "----------------------------------------------------------------------------------------------------------------------------------------------------------"
        println ""
    }
    return properties
}

private static Properties getSweetVersionProperties(String dir, String configFileName) {
    Properties properties = new Properties()
    def file = new File("${dir}/${configFileName}")
    InputStream inputStream = file.newDataInputStream()
    properties.load(inputStream)
    inputStream.close()
    return properties
}


/*
 * SweetPluginEventAndroid --> sweet-plugin-event-android -> [sweet, plugin, event, android]
 * Write a function to map camel string to a low case array
 * */

private static String[] getNameList(String currentProjectName) {
    StringBuilder stringBuilder = new StringBuilder()
    for (char c : currentProjectName.toCharArray()) {
        char nc = Character.toLowerCase(c)
        if (Character.isUpperCase(c)) {
            if (stringBuilder.length() == 0) {
                stringBuilder.append(nc)
            } else {
                stringBuilder.append('-').append(nc)
            }
        } else {
            stringBuilder.append(nc)
        }
    }
    def nameBreakDownArr = stringBuilder.toString().split("-")
    if (nameBreakDownArr.length != 4) {
        println "---------------------------------------------------------------------------------------------------------------------------------------------------------------"
        println "----- please make the library's name:'${currentProjectName}' is the same with github repo name, it should this format: [Company Name][APP or Plugin][Project Code][Android-suffix] "
        println "---------------------------------------------------------------------------------------------------------------------------------------------------------------"
    }
    return nameBreakDownArr
}

private static String getPluginVersion(properties, key) {
    if (properties.getProperty(key) != null) {
        return properties.getProperty(key)
    }
}

private static String getPomProperty(Properties SWEET_PROPERTIES, String companyName, String defaultKey) {
    String key = "${companyName}.${defaultKey}"
    if (!SWEET_PROPERTIES.containsKey(key)) {
        println "----------------------------------------------------------------------------------"
        println "----- please find the credential for company:${companyName}, includes: "
        println "----- ${companyName}.maven.password=xxx "
        println "----- ${companyName}.maven.username=xxx "
        println "----- ${companyName}.maven.url=xxx "
        println "----------------------------------------------------------------------------------"
    } else {
        return SWEET_PROPERTIES.getProperty(key)
    }
}

private static String getRepoName(Project project, String repoAliasName) {
    if (repoAliasName != null && !repoAliasName.isEmpty()) {
        return repoAliasName
    }
    if (project.name == "app") {
        return project.rootProject.name
    } else {
        return project.name
    }
}

task generateCountApiKeyForCi {
    doLast {
        mkdir "${buildDir}"
        def maven_publication_id = "${POM_GROUP_ID}:${POM_ARTIFACT_ID}"
        def ANDROID_CI_COUNT_API_HASH_KEY = System.getenv("ANDROID_CI_COUNT_API_HASH_KEY")
        def countApiKeyInMd5 = "${maven_publication_id}${ANDROID_CI_COUNT_API_HASH_KEY}".md5()
        new File("${buildDir}", "count_api_key_in_md5.txt").text = "${countApiKeyInMd5}"
        new File("${buildDir}", "maven_publication_id.txt").text = "${maven_publication_id}"
    }
}